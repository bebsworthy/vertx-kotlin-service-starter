buildscript {

    ext.kotlin_version = '1.2.31'
    ext.vertx_version = '3.5.1'


    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.2"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.10.0"
    }
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "com.diffplug.gradle.spotless"

repositories {
    mavenCentral()
    jcenter()
}

version = '0.0.1'
group = 'paths'
description = 'A sample vertx project'
sourceCompatibility = '1.8'
mainClassName = 'io.vertx.core.Launcher'
def mainVerticleName = 'paths.MainVerticle'
def config = "src/main/resources/application-conf.json"

dependencies {

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile "io.vertx:vertx-lang-js:$vertx_version"
    compile "io.vertx:vertx-lang-kotlin:$vertx_version"
    compile "io.vertx:vertx-lang-kotlin-coroutines:$vertx_version"

    compile "io.vertx:vertx-web:$vertx_version"
    compile "io.vertx:vertx-auth-jwt:$vertx_version"
    compile "io.vertx:vertx-web-api-contract:$vertx_version"
    compile "io.vertx:vertx-config:$vertx_version"
    compile "io.vertx:vertx-config-yaml:$vertx_version"
    compile "io.vertx:vertx-service-discovery:$vertx_version"
    compile "io.vertx:vertx-service-proxy:$vertx_version"
    compile "io.vertx:vertx-shell:$vertx_version"


    // kapt "io.vertx:vertx-codegen:$vertx_version:processor"
    compileOnly "io.vertx:vertx-codegen:$vertx_version"

    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.0"

    //testCompile "io.vertx:vertx-junit5:$vertx_version"
    compile "io.vertx:vertx-unit:$vertx_version"

}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

kotlin {
    experimental {
        coroutines "enable"
    }
}


// Redeploy watcher.
run {
    args = ['run', mainVerticleName,
            "--help",
            "--launcher-class=$mainClassName",
            "--conf=$config",
            "--redeploy=src/**/*.*",
            "--on-redeploy=./gradlew classes"
    ]
}

shadowJar {
    //classifier = 'fat'
    manifest {
        attributes 'Main-Verticle': "$mainVerticleName"
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

task annotationProcessing(type: JavaCompile, group: 'build') { // codegen
    source = sourceSets.main.java
    source += sourceSets.main.kotlin
    classpath = configurations.compile + configurations.compileOnly
    destinationDir = project.file('src/main/generated')
    options.compilerArgs = [
            "-proc:only",
            "-processor", "io.vertx.codegen.CodeGenProcessor",
            "-Acodegen.output=${project.projectDir}/src/main"
    ]
}

compileJava {
    targetCompatibility = 1.8
    sourceCompatibility = 1.8

    dependsOn annotationProcessing
}

sourceSets {
    main {
        java {
            srcDirs += 'src/main/generated'
        }
    }
}

spotless {
    kotlin {
        // optionally takes a version
        ktlint()

        // also supports license headers
        //licenseHeader '/* Licensed under Apache-2.0 */'	// License header
        //licenseHeaderFile 'path-to-license-file'		// License header file
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}